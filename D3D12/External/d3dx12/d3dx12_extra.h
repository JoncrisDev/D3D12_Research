#ifndef __D3DX12_EXTRA_H__
#define __D3DX12_EXTRA_H__

#include "d3d12.h"

#if defined( __cplusplus )


struct CD3DX12_INPUT_ELEMENT_DESC : public D3D12_INPUT_ELEMENT_DESC
{
	CD3DX12_INPUT_ELEMENT_DESC() = default;
	explicit CD3DX12_INPUT_ELEMENT_DESC(const D3D12_INPUT_ELEMENT_DESC& o) noexcept :
		D3D12_INPUT_ELEMENT_DESC(o)
	{}
	CD3DX12_INPUT_ELEMENT_DESC(
		const char* semanticName, 
		DXGI_FORMAT format, 
		uint32 semanticIndex = 0, 
		uint32 byteOffset = D3D12_APPEND_ALIGNED_ELEMENT, 
		uint32 inputSlot = 0, 
		D3D12_INPUT_CLASSIFICATION inputSlotClass = D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 
		uint32 instanceDataStepRate = 0)
	{
		SemanticName = semanticName;
		SemanticIndex = semanticIndex;
		Format = format;
		InputSlot = inputSlot;
		AlignedByteOffset = byteOffset;
		InputSlotClass = inputSlotClass;
		InstanceDataStepRate = instanceDataStepRate;
	}
};

struct CD3DX12_QUERY_HEAP_DESC : public D3D12_QUERY_HEAP_DESC
{
	CD3DX12_QUERY_HEAP_DESC() = default;
	CD3DX12_QUERY_HEAP_DESC(uint32 count,
		D3D12_QUERY_HEAP_TYPE type,
		uint32 nodeMask = 0)
	{
		Type = type;
		Count = count;
		NodeMask = nodeMask;
	}
};

template<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE T> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS { };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS> 					{ using Type = D3D12_PIPELINE_STATE_FLAGS; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK> 				{ using Type = UINT; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE> 			{ using Type = ID3D12RootSignature*; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT> 			{ using Type = D3D12_INPUT_LAYOUT_DESC; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE> 		{ using Type = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY> 		{ using Type = D3D12_PRIMITIVE_TOPOLOGY_TYPE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT> 			{ using Type = D3D12_STREAM_OUTPUT_DESC; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS> 						{ using Type = D3D12_SHADER_BYTECODE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND> 					{ using Type = CD3DX12_BLEND_DESC; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL> 			{ using Type = CD3DX12_DEPTH_STENCIL_DESC; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1> 			{ using Type = CD3DX12_DEPTH_STENCIL_DESC1; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT> 	{ using Type = DXGI_FORMAT; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER> 				{ using Type = CD3DX12_RASTERIZER_DESC; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS> 	{ using Type = D3D12_RT_FORMAT_ARRAY; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC> 				{ using Type = DXGI_SAMPLE_DESC; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK> 				{ using Type = UINT; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO> 				{ using Type = D3D12_CACHED_PIPELINE_STATE; };
template<> struct CD3DX12_PIPELINE_STATE_SUBOJECT_TYPE_TRAITS<D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING> 			{ using Type = CD3DX12_VIEW_INSTANCING_DESC; };

#endif // defined( __cplusplus )

#endif //__D3DX12_EXTRA_H__
